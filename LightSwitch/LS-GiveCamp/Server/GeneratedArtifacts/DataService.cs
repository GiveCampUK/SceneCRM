//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the SceneCRMData datasource.
    /// </summary>
    public sealed partial class SceneCRMDataService
        : global::LightSwitchApplication.SceneCRMData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SceneCRMDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Inserting(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Inserted(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Updating(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Updated(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Deleting(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Deleted(global::LightSwitchApplication.Child entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Validate(global::LightSwitchApplication.Child entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Inserting(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Inserted(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Updating(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Updated(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Deleting(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Deleted(global::LightSwitchApplication.Course entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Validate(global::LightSwitchApplication.Course entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Inserting(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Inserted(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Updating(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Updated(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Deleting(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Deleted(global::LightSwitchApplication.CourseAttendance entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Validate(global::LightSwitchApplication.CourseAttendance entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Inserting(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Inserted(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Updating(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Updated(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Deleting(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Deleted(global::LightSwitchApplication.CourseType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Validate(global::LightSwitchApplication.CourseType entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Inserting(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Inserted(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Updating(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Updated(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Deleting(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Deleted(global::LightSwitchApplication.CourseVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Validate(global::LightSwitchApplication.CourseVolunteer entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Inserting(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Inserted(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Updating(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Updated(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Deleting(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Deleted(global::LightSwitchApplication.CrbCheck entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Validate(global::LightSwitchApplication.CrbCheck entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Inserting(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Inserted(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Updating(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Updated(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Deleting(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Deleted(global::LightSwitchApplication.Job entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Validate(global::LightSwitchApplication.Job entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Inserting(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Inserted(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Updating(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Updated(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Deleting(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Deleted(global::LightSwitchApplication.Play entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Validate(global::LightSwitchApplication.Play entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Inserting(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Inserted(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Updating(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Updated(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Deleting(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Deleted(global::LightSwitchApplication.PlayVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Validate(global::LightSwitchApplication.PlayVolunteer entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Inserting(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Inserted(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Updating(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Updated(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Deleting(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Deleted(global::LightSwitchApplication.Production entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Validate(global::LightSwitchApplication.Production entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Inserting(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Inserted(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Updating(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Updated(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Deleting(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Deleted(global::LightSwitchApplication.ProductionVolunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Validate(global::LightSwitchApplication.ProductionVolunteer entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Inserting(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Inserted(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Updating(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Updated(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Deleting(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Deleted(global::LightSwitchApplication.sysdiagram entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Validate(global::LightSwitchApplication.sysdiagram entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Inserting(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Inserted(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Updating(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Updated(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Deleting(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Deleted(global::LightSwitchApplication.Term entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Validate(global::LightSwitchApplication.Term entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Inserting(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Inserted(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Updating(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Updated(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Deleting(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Deleted(global::LightSwitchApplication.Volunteer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Validate(global::LightSwitchApplication.Volunteer entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Inserting(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Inserted(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Updating(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Updated(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Deleting(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Deleted(global::LightSwitchApplication.VolunteerCapability entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Validate(global::LightSwitchApplication.VolunteerCapability entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Single_Executing(global::System.Nullable<int> ChildId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Single_PreprocessQuery(global::System.Nullable<int> ChildId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Single_Executed(global::System.Nullable<int> ChildId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_Single_ExecuteFailed(global::System.Nullable<int> ChildId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_SingleOrDefault_Executing(global::System.Nullable<int> ChildId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> ChildId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_SingleOrDefault_Executed(global::System.Nullable<int> ChildId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> ChildId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Children_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Single_Executing(global::System.Nullable<int> CourseId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Single_PreprocessQuery(global::System.Nullable<int> CourseId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Single_Executed(global::System.Nullable<int> CourseId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_Single_ExecuteFailed(global::System.Nullable<int> CourseId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_SingleOrDefault_Executing(global::System.Nullable<int> CourseId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> CourseId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_SingleOrDefault_Executed(global::System.Nullable<int> CourseId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> CourseId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Courses_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Single_Executing(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Single_PreprocessQuery(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Single_Executed(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_Single_ExecuteFailed(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_SingleOrDefault_Executing(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_SingleOrDefault_Executed(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseAttendances_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Single_Executing(string CourseTypeCode);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Single_PreprocessQuery(string CourseTypeCode, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Single_Executed(string CourseTypeCode, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_Single_ExecuteFailed(string CourseTypeCode, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_SingleOrDefault_Executing(string CourseTypeCode);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_SingleOrDefault_PreprocessQuery(string CourseTypeCode, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_SingleOrDefault_Executed(string CourseTypeCode, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_SingleOrDefault_ExecuteFailed(string CourseTypeCode, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseTypes_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Single_Executing(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Single_PreprocessQuery(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Single_Executed(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_Single_ExecuteFailed(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_SingleOrDefault_Executing(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_SingleOrDefault_Executed(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CourseVolunteers_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Single_Executing(global::System.Nullable<int> CrbCheckId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Single_PreprocessQuery(global::System.Nullable<int> CrbCheckId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Single_Executed(global::System.Nullable<int> CrbCheckId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_Single_ExecuteFailed(global::System.Nullable<int> CrbCheckId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_SingleOrDefault_Executing(global::System.Nullable<int> CrbCheckId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> CrbCheckId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_SingleOrDefault_Executed(global::System.Nullable<int> CrbCheckId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> CrbCheckId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CrbChecks_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Single_Executing(global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Single_PreprocessQuery(global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Single_Executed(global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_Single_ExecuteFailed(global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_SingleOrDefault_Executing(global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_SingleOrDefault_Executed(global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Jobs_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Single_Executing(global::System.Nullable<int> PlayId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Single_PreprocessQuery(global::System.Nullable<int> PlayId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Single_Executed(global::System.Nullable<int> PlayId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_Single_ExecuteFailed(global::System.Nullable<int> PlayId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_SingleOrDefault_Executing(global::System.Nullable<int> PlayId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> PlayId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_SingleOrDefault_Executed(global::System.Nullable<int> PlayId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> PlayId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Plays_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Single_Executing(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Single_PreprocessQuery(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Single_Executed(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_Single_ExecuteFailed(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_SingleOrDefault_Executing(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_SingleOrDefault_Executed(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PlayVolunteers_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Single_Executing(global::System.Nullable<int> ProductionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Single_PreprocessQuery(global::System.Nullable<int> ProductionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Single_Executed(global::System.Nullable<int> ProductionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_Single_ExecuteFailed(global::System.Nullable<int> ProductionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_SingleOrDefault_Executing(global::System.Nullable<int> ProductionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> ProductionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_SingleOrDefault_Executed(global::System.Nullable<int> ProductionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> ProductionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Productions_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Single_Executing(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Single_PreprocessQuery(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Single_Executed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_Single_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_SingleOrDefault_Executing(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_SingleOrDefault_Executed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductionVolunteers_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Single_Executing(global::System.Nullable<int> diagram_id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Single_PreprocessQuery(global::System.Nullable<int> diagram_id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Single_Executed(global::System.Nullable<int> diagram_id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_Single_ExecuteFailed(global::System.Nullable<int> diagram_id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_SingleOrDefault_Executing(global::System.Nullable<int> diagram_id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> diagram_id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_SingleOrDefault_Executed(global::System.Nullable<int> diagram_id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> diagram_id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void sysdiagrams_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Single_Executing(global::System.Nullable<int> TermId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Single_PreprocessQuery(global::System.Nullable<int> TermId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Single_Executed(global::System.Nullable<int> TermId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_Single_ExecuteFailed(global::System.Nullable<int> TermId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_SingleOrDefault_Executing(global::System.Nullable<int> TermId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> TermId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_SingleOrDefault_Executed(global::System.Nullable<int> TermId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> TermId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Terms_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Single_Executing(global::System.Nullable<int> VolunteerId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Single_PreprocessQuery(global::System.Nullable<int> VolunteerId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Single_Executed(global::System.Nullable<int> VolunteerId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_Single_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_SingleOrDefault_Executing(global::System.Nullable<int> VolunteerId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> VolunteerId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_SingleOrDefault_Executed(global::System.Nullable<int> VolunteerId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Volunteers_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Single_Executing(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Single_PreprocessQuery(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Single_Executed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_Single_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_SingleOrDefault_Executing(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_SingleOrDefault_Executed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VolunteerCapabilities_All_ExecuteFailed(global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>
                __ChildrenEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>(
                    "Children",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Validate);
            private static bool __Children_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Children_CanInsert(ref result);
                return result;
            }
            private static bool __Children_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Children_CanUpdate(ref result);
                return result;
            }
            private static bool __Children_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Children_CanDelete(ref result);
                return result;
            }
            private static bool __Children_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Children_CanRead(ref result);
                return result;
            }
            private static void __Children_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Inserting(e);
            }
            private static void __Children_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Inserted(e);
            }
            private static void __Children_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Updating(e);
            }
            private static void __Children_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Updated(e);
            }
            private static void __Children_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Deleting(e);
            }
            private static void __Children_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e)
            {
                d.Children_Deleted(e);
            }
            private static void __Children_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Child e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Children_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>
                __CoursesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>(
                    "Courses",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Validate);
            private static bool __Courses_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Courses_CanInsert(ref result);
                return result;
            }
            private static bool __Courses_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Courses_CanUpdate(ref result);
                return result;
            }
            private static bool __Courses_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Courses_CanDelete(ref result);
                return result;
            }
            private static bool __Courses_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Courses_CanRead(ref result);
                return result;
            }
            private static void __Courses_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Inserting(e);
            }
            private static void __Courses_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Inserted(e);
            }
            private static void __Courses_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Updating(e);
            }
            private static void __Courses_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Updated(e);
            }
            private static void __Courses_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Deleting(e);
            }
            private static void __Courses_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e)
            {
                d.Courses_Deleted(e);
            }
            private static void __Courses_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Course e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Courses_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>
                __CourseAttendancesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>(
                    "CourseAttendances",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Validate);
            private static bool __CourseAttendances_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseAttendances_CanInsert(ref result);
                return result;
            }
            private static bool __CourseAttendances_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseAttendances_CanUpdate(ref result);
                return result;
            }
            private static bool __CourseAttendances_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseAttendances_CanDelete(ref result);
                return result;
            }
            private static bool __CourseAttendances_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseAttendances_CanRead(ref result);
                return result;
            }
            private static void __CourseAttendances_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Inserting(e);
            }
            private static void __CourseAttendances_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Inserted(e);
            }
            private static void __CourseAttendances_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Updating(e);
            }
            private static void __CourseAttendances_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Updated(e);
            }
            private static void __CourseAttendances_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Deleting(e);
            }
            private static void __CourseAttendances_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e)
            {
                d.CourseAttendances_Deleted(e);
            }
            private static void __CourseAttendances_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseAttendance e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CourseAttendances_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>
                __CourseTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>(
                    "CourseTypes",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Validate);
            private static bool __CourseTypes_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseTypes_CanInsert(ref result);
                return result;
            }
            private static bool __CourseTypes_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __CourseTypes_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseTypes_CanDelete(ref result);
                return result;
            }
            private static bool __CourseTypes_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseTypes_CanRead(ref result);
                return result;
            }
            private static void __CourseTypes_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Inserting(e);
            }
            private static void __CourseTypes_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Inserted(e);
            }
            private static void __CourseTypes_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Updating(e);
            }
            private static void __CourseTypes_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Updated(e);
            }
            private static void __CourseTypes_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Deleting(e);
            }
            private static void __CourseTypes_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e)
            {
                d.CourseTypes_Deleted(e);
            }
            private static void __CourseTypes_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseType e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CourseTypes_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>
                __CourseVolunteersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>(
                    "CourseVolunteers",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Validate);
            private static bool __CourseVolunteers_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseVolunteers_CanInsert(ref result);
                return result;
            }
            private static bool __CourseVolunteers_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseVolunteers_CanUpdate(ref result);
                return result;
            }
            private static bool __CourseVolunteers_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseVolunteers_CanDelete(ref result);
                return result;
            }
            private static bool __CourseVolunteers_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CourseVolunteers_CanRead(ref result);
                return result;
            }
            private static void __CourseVolunteers_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Inserting(e);
            }
            private static void __CourseVolunteers_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Inserted(e);
            }
            private static void __CourseVolunteers_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Updating(e);
            }
            private static void __CourseVolunteers_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Updated(e);
            }
            private static void __CourseVolunteers_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Deleting(e);
            }
            private static void __CourseVolunteers_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e)
            {
                d.CourseVolunteers_Deleted(e);
            }
            private static void __CourseVolunteers_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CourseVolunteer e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CourseVolunteers_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>
                __CrbChecksEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>(
                    "CrbChecks",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Validate);
            private static bool __CrbChecks_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CrbChecks_CanInsert(ref result);
                return result;
            }
            private static bool __CrbChecks_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CrbChecks_CanUpdate(ref result);
                return result;
            }
            private static bool __CrbChecks_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CrbChecks_CanDelete(ref result);
                return result;
            }
            private static bool __CrbChecks_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.CrbChecks_CanRead(ref result);
                return result;
            }
            private static void __CrbChecks_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Inserting(e);
            }
            private static void __CrbChecks_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Inserted(e);
            }
            private static void __CrbChecks_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Updating(e);
            }
            private static void __CrbChecks_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Updated(e);
            }
            private static void __CrbChecks_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Deleting(e);
            }
            private static void __CrbChecks_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e)
            {
                d.CrbChecks_Deleted(e);
            }
            private static void __CrbChecks_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.CrbCheck e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.CrbChecks_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>
                __JobsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>(
                    "Jobs",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Validate);
            private static bool __Jobs_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Jobs_CanInsert(ref result);
                return result;
            }
            private static bool __Jobs_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Jobs_CanUpdate(ref result);
                return result;
            }
            private static bool __Jobs_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Jobs_CanDelete(ref result);
                return result;
            }
            private static bool __Jobs_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Jobs_CanRead(ref result);
                return result;
            }
            private static void __Jobs_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Inserting(e);
            }
            private static void __Jobs_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Inserted(e);
            }
            private static void __Jobs_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Updating(e);
            }
            private static void __Jobs_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Updated(e);
            }
            private static void __Jobs_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Deleting(e);
            }
            private static void __Jobs_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e)
            {
                d.Jobs_Deleted(e);
            }
            private static void __Jobs_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Job e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Jobs_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>
                __PlaysEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>(
                    "Plays",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Validate);
            private static bool __Plays_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Plays_CanInsert(ref result);
                return result;
            }
            private static bool __Plays_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Plays_CanUpdate(ref result);
                return result;
            }
            private static bool __Plays_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Plays_CanDelete(ref result);
                return result;
            }
            private static bool __Plays_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Plays_CanRead(ref result);
                return result;
            }
            private static void __Plays_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Inserting(e);
            }
            private static void __Plays_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Inserted(e);
            }
            private static void __Plays_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Updating(e);
            }
            private static void __Plays_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Updated(e);
            }
            private static void __Plays_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Deleting(e);
            }
            private static void __Plays_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e)
            {
                d.Plays_Deleted(e);
            }
            private static void __Plays_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Play e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Plays_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>
                __PlayVolunteersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>(
                    "PlayVolunteers",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Validate);
            private static bool __PlayVolunteers_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.PlayVolunteers_CanInsert(ref result);
                return result;
            }
            private static bool __PlayVolunteers_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.PlayVolunteers_CanUpdate(ref result);
                return result;
            }
            private static bool __PlayVolunteers_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.PlayVolunteers_CanDelete(ref result);
                return result;
            }
            private static bool __PlayVolunteers_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.PlayVolunteers_CanRead(ref result);
                return result;
            }
            private static void __PlayVolunteers_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Inserting(e);
            }
            private static void __PlayVolunteers_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Inserted(e);
            }
            private static void __PlayVolunteers_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Updating(e);
            }
            private static void __PlayVolunteers_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Updated(e);
            }
            private static void __PlayVolunteers_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Deleting(e);
            }
            private static void __PlayVolunteers_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e)
            {
                d.PlayVolunteers_Deleted(e);
            }
            private static void __PlayVolunteers_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.PlayVolunteer e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.PlayVolunteers_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>
                __ProductionsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>(
                    "Productions",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Validate);
            private static bool __Productions_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Productions_CanInsert(ref result);
                return result;
            }
            private static bool __Productions_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Productions_CanUpdate(ref result);
                return result;
            }
            private static bool __Productions_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Productions_CanDelete(ref result);
                return result;
            }
            private static bool __Productions_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Productions_CanRead(ref result);
                return result;
            }
            private static void __Productions_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Inserting(e);
            }
            private static void __Productions_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Inserted(e);
            }
            private static void __Productions_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Updating(e);
            }
            private static void __Productions_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Updated(e);
            }
            private static void __Productions_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Deleting(e);
            }
            private static void __Productions_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e)
            {
                d.Productions_Deleted(e);
            }
            private static void __Productions_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Production e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Productions_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>
                __ProductionVolunteersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>(
                    "ProductionVolunteers",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Validate);
            private static bool __ProductionVolunteers_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.ProductionVolunteers_CanInsert(ref result);
                return result;
            }
            private static bool __ProductionVolunteers_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.ProductionVolunteers_CanUpdate(ref result);
                return result;
            }
            private static bool __ProductionVolunteers_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.ProductionVolunteers_CanDelete(ref result);
                return result;
            }
            private static bool __ProductionVolunteers_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.ProductionVolunteers_CanRead(ref result);
                return result;
            }
            private static void __ProductionVolunteers_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Inserting(e);
            }
            private static void __ProductionVolunteers_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Inserted(e);
            }
            private static void __ProductionVolunteers_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Updating(e);
            }
            private static void __ProductionVolunteers_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Updated(e);
            }
            private static void __ProductionVolunteers_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Deleting(e);
            }
            private static void __ProductionVolunteers_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e)
            {
                d.ProductionVolunteers_Deleted(e);
            }
            private static void __ProductionVolunteers_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.ProductionVolunteer e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ProductionVolunteers_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>
                __sysdiagramsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>(
                    "sysdiagrams",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Validate);
            private static bool __sysdiagrams_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanInsert(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanUpdate(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanDelete(ref result);
                return result;
            }
            private static bool __sysdiagrams_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.sysdiagrams_CanRead(ref result);
                return result;
            }
            private static void __sysdiagrams_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Inserting(e);
            }
            private static void __sysdiagrams_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Inserted(e);
            }
            private static void __sysdiagrams_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Updating(e);
            }
            private static void __sysdiagrams_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Updated(e);
            }
            private static void __sysdiagrams_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Deleting(e);
            }
            private static void __sysdiagrams_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e)
            {
                d.sysdiagrams_Deleted(e);
            }
            private static void __sysdiagrams_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.sysdiagram e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.sysdiagrams_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>
                __TermsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>(
                    "Terms",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Validate);
            private static bool __Terms_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Terms_CanInsert(ref result);
                return result;
            }
            private static bool __Terms_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Terms_CanUpdate(ref result);
                return result;
            }
            private static bool __Terms_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Terms_CanDelete(ref result);
                return result;
            }
            private static bool __Terms_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Terms_CanRead(ref result);
                return result;
            }
            private static void __Terms_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Inserting(e);
            }
            private static void __Terms_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Inserted(e);
            }
            private static void __Terms_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Updating(e);
            }
            private static void __Terms_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Updated(e);
            }
            private static void __Terms_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Deleting(e);
            }
            private static void __Terms_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e)
            {
                d.Terms_Deleted(e);
            }
            private static void __Terms_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Term e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Terms_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>
                __VolunteersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>(
                    "Volunteers",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Validate);
            private static bool __Volunteers_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Volunteers_CanInsert(ref result);
                return result;
            }
            private static bool __Volunteers_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Volunteers_CanUpdate(ref result);
                return result;
            }
            private static bool __Volunteers_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Volunteers_CanDelete(ref result);
                return result;
            }
            private static bool __Volunteers_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.Volunteers_CanRead(ref result);
                return result;
            }
            private static void __Volunteers_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Inserting(e);
            }
            private static void __Volunteers_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Inserted(e);
            }
            private static void __Volunteers_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Updating(e);
            }
            private static void __Volunteers_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Updated(e);
            }
            private static void __Volunteers_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Deleting(e);
            }
            private static void __Volunteers_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e)
            {
                d.Volunteers_Deleted(e);
            }
            private static void __Volunteers_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.Volunteer e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Volunteers_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>
                __VolunteerCapabilitiesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>(
                    "VolunteerCapabilities",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_CanInsert,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_CanUpdate,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_CanDelete,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_CanRead,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Inserting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Inserted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Updating,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Updated,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Deleting,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Deleted,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Validate);
            private static bool __VolunteerCapabilities_CanInsert(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.VolunteerCapabilities_CanInsert(ref result);
                return result;
            }
            private static bool __VolunteerCapabilities_CanUpdate(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.VolunteerCapabilities_CanUpdate(ref result);
                return result;
            }
            private static bool __VolunteerCapabilities_CanDelete(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.VolunteerCapabilities_CanDelete(ref result);
                return result;
            }
            private static bool __VolunteerCapabilities_CanRead(global::LightSwitchApplication.SceneCRMDataService d)
            {
                bool result = true;
                d.VolunteerCapabilities_CanRead(ref result);
                return result;
            }
            private static void __VolunteerCapabilities_Inserting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Inserting(e);
            }
            private static void __VolunteerCapabilities_Inserted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Inserted(e);
            }
            private static void __VolunteerCapabilities_Updating(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Updating(e);
            }
            private static void __VolunteerCapabilities_Updated(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Updated(e);
            }
            private static void __VolunteerCapabilities_Deleting(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Deleting(e);
            }
            private static void __VolunteerCapabilities_Deleted(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e)
            {
                d.VolunteerCapabilities_Deleted(e);
            }
            private static void __VolunteerCapabilities_Validate(global::LightSwitchApplication.SceneCRMDataService d, global::LightSwitchApplication.VolunteerCapability e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.VolunteerCapabilities_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.SceneCRMDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.SceneCRMDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>
                __Children_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>(
                    "Children_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_Single_PreprocessQuery);
            private static bool __Children_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Children_Single_CanExecute(ref r);
                return r;
            }
            private static void __Children_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Children_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child>)args[1]);
            }
            private static void __Children_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Children_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Children_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Child>)args[1];
                d.Children_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>
                __Children_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>(
                    "Children_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_SingleOrDefault_PreprocessQuery);
            private static bool __Children_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Children_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Children_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Children_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child>)args[1]);
            }
            private static void __Children_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Children_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Children_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Child>)args[1];
                d.Children_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>
                __Children_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Child>(
                    "Children_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Children_All_PreprocessQuery);
            private static bool __Children_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Children_All_CanExecute(ref r);
                return r;
            }
            private static void __Children_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_All_Executing();
            }
            private static void __Children_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Children_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Child>)args[0]);
            }
            private static void __Children_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Children_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Children_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Child> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Child>)args[0];
                d.Children_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>
                __Courses_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>(
                    "Courses_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_Single_PreprocessQuery);
            private static bool __Courses_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Courses_Single_CanExecute(ref r);
                return r;
            }
            private static void __Courses_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Courses_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course>)args[1]);
            }
            private static void __Courses_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Courses_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Courses_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Course>)args[1];
                d.Courses_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>
                __Courses_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>(
                    "Courses_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_SingleOrDefault_PreprocessQuery);
            private static bool __Courses_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Courses_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Courses_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Courses_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course>)args[1]);
            }
            private static void __Courses_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Courses_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Courses_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Course>)args[1];
                d.Courses_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>
                __Courses_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Course>(
                    "Courses_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Courses_All_PreprocessQuery);
            private static bool __Courses_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Courses_All_CanExecute(ref r);
                return r;
            }
            private static void __Courses_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_All_Executing();
            }
            private static void __Courses_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Courses_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Course>)args[0]);
            }
            private static void __Courses_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Courses_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Courses_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Course> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Course>)args[0];
                d.Courses_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>
                __CourseAttendances_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>(
                    "CourseAttendances_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_Single_PreprocessQuery);
            private static bool __CourseAttendances_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseAttendances_Single_CanExecute(ref r);
                return r;
            }
            private static void __CourseAttendances_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1]);
            }
            private static void __CourseAttendances_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance>)args[2]);
            }
            private static void __CourseAttendances_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseAttendances_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ex);
            }
            private static global::System.Linq.IQueryable __CourseAttendances_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance>)args[2];
                d.CourseAttendances_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>
                __CourseAttendances_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>(
                    "CourseAttendances_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_SingleOrDefault_PreprocessQuery);
            private static bool __CourseAttendances_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseAttendances_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __CourseAttendances_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1]);
            }
            private static void __CourseAttendances_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance>)args[2]);
            }
            private static void __CourseAttendances_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseAttendances_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ex);
            }
            private static global::System.Linq.IQueryable __CourseAttendances_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance>)args[2];
                d.CourseAttendances_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>
                __CourseAttendances_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseAttendance>(
                    "CourseAttendances_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseAttendances_All_PreprocessQuery);
            private static bool __CourseAttendances_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseAttendances_All_CanExecute(ref r);
                return r;
            }
            private static void __CourseAttendances_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_All_Executing();
            }
            private static void __CourseAttendances_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseAttendances_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseAttendance>)args[0]);
            }
            private static void __CourseAttendances_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseAttendances_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __CourseAttendances_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseAttendance>)args[0];
                d.CourseAttendances_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>
                __CourseTypes_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>(
                    "CourseTypes_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_Single_PreprocessQuery);
            private static bool __CourseTypes_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseTypes_Single_CanExecute(ref r);
                return r;
            }
            private static void __CourseTypes_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_Single_Executing((string)args[0]);
            }
            private static void __CourseTypes_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_Single_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType>)args[1]);
            }
            private static void __CourseTypes_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseTypes_Single_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __CourseTypes_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType>)args[1];
                d.CourseTypes_Single_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>
                __CourseTypes_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>(
                    "CourseTypes_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_SingleOrDefault_PreprocessQuery);
            private static bool __CourseTypes_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseTypes_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __CourseTypes_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_SingleOrDefault_Executing((string)args[0]);
            }
            private static void __CourseTypes_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_SingleOrDefault_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType>)args[1]);
            }
            private static void __CourseTypes_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseTypes_SingleOrDefault_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __CourseTypes_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType>)args[1];
                d.CourseTypes_SingleOrDefault_PreprocessQuery((string)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>
                __CourseTypes_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseType>(
                    "CourseTypes_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseTypes_All_PreprocessQuery);
            private static bool __CourseTypes_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseTypes_All_CanExecute(ref r);
                return r;
            }
            private static void __CourseTypes_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_All_Executing();
            }
            private static void __CourseTypes_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseTypes_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseType>)args[0]);
            }
            private static void __CourseTypes_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseTypes_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __CourseTypes_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseType>)args[0];
                d.CourseTypes_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>
                __CourseVolunteers_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>(
                    "CourseVolunteers_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_Single_PreprocessQuery);
            private static bool __CourseVolunteers_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseVolunteers_Single_CanExecute(ref r);
                return r;
            }
            private static void __CourseVolunteers_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __CourseVolunteers_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer>)args[3]);
            }
            private static void __CourseVolunteers_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseVolunteers_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __CourseVolunteers_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer>)args[3];
                d.CourseVolunteers_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>
                __CourseVolunteers_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>(
                    "CourseVolunteers_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_SingleOrDefault_PreprocessQuery);
            private static bool __CourseVolunteers_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseVolunteers_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __CourseVolunteers_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __CourseVolunteers_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer>)args[3]);
            }
            private static void __CourseVolunteers_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseVolunteers_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __CourseVolunteers_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer>)args[3];
                d.CourseVolunteers_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>
                __CourseVolunteers_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CourseVolunteer>(
                    "CourseVolunteers_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CourseVolunteers_All_PreprocessQuery);
            private static bool __CourseVolunteers_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CourseVolunteers_All_CanExecute(ref r);
                return r;
            }
            private static void __CourseVolunteers_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_All_Executing();
            }
            private static void __CourseVolunteers_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CourseVolunteers_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CourseVolunteer>)args[0]);
            }
            private static void __CourseVolunteers_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CourseVolunteers_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __CourseVolunteers_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CourseVolunteer>)args[0];
                d.CourseVolunteers_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>
                __CrbChecks_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>(
                    "CrbChecks_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_Single_PreprocessQuery);
            private static bool __CrbChecks_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CrbChecks_Single_CanExecute(ref r);
                return r;
            }
            private static void __CrbChecks_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __CrbChecks_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck>)args[1]);
            }
            private static void __CrbChecks_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CrbChecks_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __CrbChecks_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck>)args[1];
                d.CrbChecks_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>
                __CrbChecks_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>(
                    "CrbChecks_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_SingleOrDefault_PreprocessQuery);
            private static bool __CrbChecks_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CrbChecks_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __CrbChecks_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __CrbChecks_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck>)args[1]);
            }
            private static void __CrbChecks_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CrbChecks_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __CrbChecks_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck>)args[1];
                d.CrbChecks_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>
                __CrbChecks_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.CrbCheck>(
                    "CrbChecks_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__CrbChecks_All_PreprocessQuery);
            private static bool __CrbChecks_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.CrbChecks_All_CanExecute(ref r);
                return r;
            }
            private static void __CrbChecks_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_All_Executing();
            }
            private static void __CrbChecks_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.CrbChecks_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.CrbCheck>)args[0]);
            }
            private static void __CrbChecks_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.CrbChecks_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __CrbChecks_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.CrbCheck>)args[0];
                d.CrbChecks_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>
                __Jobs_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>(
                    "Jobs_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_Single_PreprocessQuery);
            private static bool __Jobs_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Jobs_Single_CanExecute(ref r);
                return r;
            }
            private static void __Jobs_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Jobs_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job>)args[1]);
            }
            private static void __Jobs_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Jobs_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Jobs_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Job>)args[1];
                d.Jobs_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>
                __Jobs_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>(
                    "Jobs_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_SingleOrDefault_PreprocessQuery);
            private static bool __Jobs_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Jobs_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Jobs_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Jobs_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job>)args[1]);
            }
            private static void __Jobs_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Jobs_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Jobs_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Job>)args[1];
                d.Jobs_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>
                __Jobs_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Job>(
                    "Jobs_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Jobs_All_PreprocessQuery);
            private static bool __Jobs_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Jobs_All_CanExecute(ref r);
                return r;
            }
            private static void __Jobs_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_All_Executing();
            }
            private static void __Jobs_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Jobs_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Job>)args[0]);
            }
            private static void __Jobs_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Jobs_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Jobs_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Job> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Job>)args[0];
                d.Jobs_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>
                __Plays_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>(
                    "Plays_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_Single_PreprocessQuery);
            private static bool __Plays_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Plays_Single_CanExecute(ref r);
                return r;
            }
            private static void __Plays_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Plays_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play>)args[1]);
            }
            private static void __Plays_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Plays_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Plays_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Play>)args[1];
                d.Plays_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>
                __Plays_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>(
                    "Plays_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_SingleOrDefault_PreprocessQuery);
            private static bool __Plays_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Plays_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Plays_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Plays_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play>)args[1]);
            }
            private static void __Plays_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Plays_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Plays_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Play>)args[1];
                d.Plays_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>
                __Plays_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Play>(
                    "Plays_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Plays_All_PreprocessQuery);
            private static bool __Plays_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Plays_All_CanExecute(ref r);
                return r;
            }
            private static void __Plays_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_All_Executing();
            }
            private static void __Plays_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Plays_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Play>)args[0]);
            }
            private static void __Plays_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Plays_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Plays_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Play> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Play>)args[0];
                d.Plays_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>
                __PlayVolunteers_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>(
                    "PlayVolunteers_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_Single_PreprocessQuery);
            private static bool __PlayVolunteers_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.PlayVolunteers_Single_CanExecute(ref r);
                return r;
            }
            private static void __PlayVolunteers_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __PlayVolunteers_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer>)args[3]);
            }
            private static void __PlayVolunteers_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.PlayVolunteers_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __PlayVolunteers_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer>)args[3];
                d.PlayVolunteers_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>
                __PlayVolunteers_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>(
                    "PlayVolunteers_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_SingleOrDefault_PreprocessQuery);
            private static bool __PlayVolunteers_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.PlayVolunteers_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __PlayVolunteers_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __PlayVolunteers_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer>)args[3]);
            }
            private static void __PlayVolunteers_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.PlayVolunteers_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __PlayVolunteers_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer>)args[3];
                d.PlayVolunteers_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>
                __PlayVolunteers_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.PlayVolunteer>(
                    "PlayVolunteers_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__PlayVolunteers_All_PreprocessQuery);
            private static bool __PlayVolunteers_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.PlayVolunteers_All_CanExecute(ref r);
                return r;
            }
            private static void __PlayVolunteers_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_All_Executing();
            }
            private static void __PlayVolunteers_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.PlayVolunteers_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.PlayVolunteer>)args[0]);
            }
            private static void __PlayVolunteers_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.PlayVolunteers_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __PlayVolunteers_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.PlayVolunteer>)args[0];
                d.PlayVolunteers_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>
                __Productions_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>(
                    "Productions_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_Single_PreprocessQuery);
            private static bool __Productions_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Productions_Single_CanExecute(ref r);
                return r;
            }
            private static void __Productions_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Productions_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production>)args[1]);
            }
            private static void __Productions_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Productions_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Productions_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Production>)args[1];
                d.Productions_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>
                __Productions_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>(
                    "Productions_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_SingleOrDefault_PreprocessQuery);
            private static bool __Productions_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Productions_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Productions_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Productions_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production>)args[1]);
            }
            private static void __Productions_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Productions_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Productions_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Production>)args[1];
                d.Productions_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>
                __Productions_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Production>(
                    "Productions_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Productions_All_PreprocessQuery);
            private static bool __Productions_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Productions_All_CanExecute(ref r);
                return r;
            }
            private static void __Productions_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_All_Executing();
            }
            private static void __Productions_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Productions_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Production>)args[0]);
            }
            private static void __Productions_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Productions_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Productions_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Production> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Production>)args[0];
                d.Productions_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>
                __ProductionVolunteers_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>(
                    "ProductionVolunteers_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_Single_PreprocessQuery);
            private static bool __ProductionVolunteers_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.ProductionVolunteers_Single_CanExecute(ref r);
                return r;
            }
            private static void __ProductionVolunteers_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __ProductionVolunteers_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer>)args[3]);
            }
            private static void __ProductionVolunteers_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.ProductionVolunteers_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __ProductionVolunteers_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer>)args[3];
                d.ProductionVolunteers_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>
                __ProductionVolunteers_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>(
                    "ProductionVolunteers_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_SingleOrDefault_PreprocessQuery);
            private static bool __ProductionVolunteers_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.ProductionVolunteers_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __ProductionVolunteers_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2]);
            }
            private static void __ProductionVolunteers_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer>)args[3]);
            }
            private static void __ProductionVolunteers_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.ProductionVolunteers_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ex);
            }
            private static global::System.Linq.IQueryable __ProductionVolunteers_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer>)args[3];
                d.ProductionVolunteers_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Nullable<int>)args[2], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>
                __ProductionVolunteers_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.ProductionVolunteer>(
                    "ProductionVolunteers_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__ProductionVolunteers_All_PreprocessQuery);
            private static bool __ProductionVolunteers_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.ProductionVolunteers_All_CanExecute(ref r);
                return r;
            }
            private static void __ProductionVolunteers_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_All_Executing();
            }
            private static void __ProductionVolunteers_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.ProductionVolunteers_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.ProductionVolunteer>)args[0]);
            }
            private static void __ProductionVolunteers_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.ProductionVolunteers_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __ProductionVolunteers_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.ProductionVolunteer>)args[0];
                d.ProductionVolunteers_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>
                __sysdiagrams_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>(
                    "sysdiagrams_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_Single_PreprocessQuery);
            private static bool __sysdiagrams_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.sysdiagrams_Single_CanExecute(ref r);
                return r;
            }
            private static void __sysdiagrams_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __sysdiagrams_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram>)args[1]);
            }
            private static void __sysdiagrams_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.sysdiagrams_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __sysdiagrams_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram>)args[1];
                d.sysdiagrams_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>
                __sysdiagrams_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>(
                    "sysdiagrams_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_SingleOrDefault_PreprocessQuery);
            private static bool __sysdiagrams_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.sysdiagrams_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __sysdiagrams_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __sysdiagrams_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram>)args[1]);
            }
            private static void __sysdiagrams_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.sysdiagrams_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __sysdiagrams_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram>)args[1];
                d.sysdiagrams_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>
                __sysdiagrams_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.sysdiagram>(
                    "sysdiagrams_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__sysdiagrams_All_PreprocessQuery);
            private static bool __sysdiagrams_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.sysdiagrams_All_CanExecute(ref r);
                return r;
            }
            private static void __sysdiagrams_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_All_Executing();
            }
            private static void __sysdiagrams_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.sysdiagrams_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.sysdiagram>)args[0]);
            }
            private static void __sysdiagrams_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.sysdiagrams_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __sysdiagrams_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.sysdiagram>)args[0];
                d.sysdiagrams_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>
                __Terms_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>(
                    "Terms_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_Single_PreprocessQuery);
            private static bool __Terms_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Terms_Single_CanExecute(ref r);
                return r;
            }
            private static void __Terms_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Terms_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term>)args[1]);
            }
            private static void __Terms_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Terms_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Terms_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Term>)args[1];
                d.Terms_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>
                __Terms_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>(
                    "Terms_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_SingleOrDefault_PreprocessQuery);
            private static bool __Terms_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Terms_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Terms_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Terms_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term>)args[1]);
            }
            private static void __Terms_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Terms_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Terms_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Term>)args[1];
                d.Terms_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>
                __Terms_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Term>(
                    "Terms_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Terms_All_PreprocessQuery);
            private static bool __Terms_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Terms_All_CanExecute(ref r);
                return r;
            }
            private static void __Terms_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_All_Executing();
            }
            private static void __Terms_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Terms_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Term>)args[0]);
            }
            private static void __Terms_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Terms_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Terms_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Term> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Term>)args[0];
                d.Terms_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>
                __Volunteers_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>(
                    "Volunteers_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_Single_PreprocessQuery);
            private static bool __Volunteers_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Volunteers_Single_CanExecute(ref r);
                return r;
            }
            private static void __Volunteers_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Volunteers_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer>)args[1]);
            }
            private static void __Volunteers_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Volunteers_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Volunteers_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer>)args[1];
                d.Volunteers_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>
                __Volunteers_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>(
                    "Volunteers_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_SingleOrDefault_PreprocessQuery);
            private static bool __Volunteers_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Volunteers_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Volunteers_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Volunteers_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer>)args[1]);
            }
            private static void __Volunteers_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Volunteers_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Volunteers_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer>)args[1];
                d.Volunteers_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>
                __Volunteers_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.Volunteer>(
                    "Volunteers_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__Volunteers_All_PreprocessQuery);
            private static bool __Volunteers_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.Volunteers_All_CanExecute(ref r);
                return r;
            }
            private static void __Volunteers_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_All_Executing();
            }
            private static void __Volunteers_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.Volunteers_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Volunteer>)args[0]);
            }
            private static void __Volunteers_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.Volunteers_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Volunteers_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Volunteer>)args[0];
                d.Volunteers_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>
                __VolunteerCapabilities_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>(
                    "VolunteerCapabilities_Single",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Single_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Single_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Single_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Single_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_Single_PreprocessQuery);
            private static bool __VolunteerCapabilities_Single_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.VolunteerCapabilities_Single_CanExecute(ref r);
                return r;
            }
            private static void __VolunteerCapabilities_Single_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_Single_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1]);
            }
            private static void __VolunteerCapabilities_Single_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability>)args[2]);
            }
            private static void __VolunteerCapabilities_Single_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.VolunteerCapabilities_Single_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ex);
            }
            private static global::System.Linq.IQueryable __VolunteerCapabilities_Single_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability>)args[2];
                d.VolunteerCapabilities_Single_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>
                __VolunteerCapabilities_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>(
                    "VolunteerCapabilities_SingleOrDefault",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_SingleOrDefault_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_SingleOrDefault_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_SingleOrDefault_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_SingleOrDefault_PreprocessQuery);
            private static bool __VolunteerCapabilities_SingleOrDefault_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.VolunteerCapabilities_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __VolunteerCapabilities_SingleOrDefault_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_SingleOrDefault_Executing((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1]);
            }
            private static void __VolunteerCapabilities_SingleOrDefault_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability>)args[2]);
            }
            private static void __VolunteerCapabilities_SingleOrDefault_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.VolunteerCapabilities_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ex);
            }
            private static global::System.Linq.IQueryable __VolunteerCapabilities_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability>)args[2];
                d.VolunteerCapabilities_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], (global::System.Nullable<int>)args[1], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>
                __VolunteerCapabilities_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.SceneCRMDataService, global::LightSwitchApplication.VolunteerCapability>(
                    "VolunteerCapabilities_All",
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_All_CanExecute,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_All_Executing,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_All_Executed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_All_Failed,
                    global::LightSwitchApplication.SceneCRMDataService.DetailsClass.__VolunteerCapabilities_All_PreprocessQuery);
            private static bool __VolunteerCapabilities_All_CanExecute(global::LightSwitchApplication.SceneCRMDataService d, bool r)
            {
                d.VolunteerCapabilities_All_CanExecute(ref r);
                return r;
            }
            private static void __VolunteerCapabilities_All_Executing(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_All_Executing();
            }
            private static void __VolunteerCapabilities_All_Executed(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                d.VolunteerCapabilities_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.VolunteerCapability>)args[0]);
            }
            private static void __VolunteerCapabilities_All_Failed(global::LightSwitchApplication.SceneCRMDataService d, object[] args, global::System.Exception ex)
            {
                d.VolunteerCapabilities_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __VolunteerCapabilities_All_PreprocessQuery(global::LightSwitchApplication.SceneCRMDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.VolunteerCapability>)args[0];
                d.VolunteerCapabilities_All_PreprocessQuery(ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    #endregion
}
