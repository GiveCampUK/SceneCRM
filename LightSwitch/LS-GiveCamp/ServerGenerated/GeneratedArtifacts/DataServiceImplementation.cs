//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class SceneCRMDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::SceneCRMData.Implementation.SceneCRMDataObjectContext>
    {
    
        public SceneCRMDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Child
    
        public void InsertChild(global::SceneCRMData.Implementation.Child entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Children.AddObject(entity);
            }
        }
    
        public void UpdateChild(global::SceneCRMData.Implementation.Child currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Children, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteChild(global::SceneCRMData.Implementation.Child entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Children.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Course
    
        public void InsertCourse(global::SceneCRMData.Implementation.Course entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Courses.AddObject(entity);
            }
        }
    
        public void UpdateCourse(global::SceneCRMData.Implementation.Course currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Courses, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCourse(global::SceneCRMData.Implementation.Course entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Courses.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CourseAttendance
    
        public void InsertCourseAttendance(global::SceneCRMData.Implementation.CourseAttendance entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CourseAttendances.AddObject(entity);
            }
        }
    
        public void UpdateCourseAttendance(global::SceneCRMData.Implementation.CourseAttendance currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CourseAttendances, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCourseAttendance(global::SceneCRMData.Implementation.CourseAttendance entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CourseAttendances.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CourseType
    
        public void InsertCourseType(global::SceneCRMData.Implementation.CourseType entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CourseTypes.AddObject(entity);
            }
        }
    
        public void UpdateCourseType(global::SceneCRMData.Implementation.CourseType currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CourseTypes, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCourseType(global::SceneCRMData.Implementation.CourseType entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CourseTypes.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CourseVolunteer
    
        public void InsertCourseVolunteer(global::SceneCRMData.Implementation.CourseVolunteer entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CourseVolunteers.AddObject(entity);
            }
        }
    
        public void UpdateCourseVolunteer(global::SceneCRMData.Implementation.CourseVolunteer currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CourseVolunteers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCourseVolunteer(global::SceneCRMData.Implementation.CourseVolunteer entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CourseVolunteers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CrbCheck
    
        public void InsertCrbCheck(global::SceneCRMData.Implementation.CrbCheck entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CrbChecks.AddObject(entity);
            }
        }
    
        public void UpdateCrbCheck(global::SceneCRMData.Implementation.CrbCheck currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CrbChecks, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCrbCheck(global::SceneCRMData.Implementation.CrbCheck entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CrbChecks.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Job
    
        public void InsertJob(global::SceneCRMData.Implementation.Job entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Jobs.AddObject(entity);
            }
        }
    
        public void UpdateJob(global::SceneCRMData.Implementation.Job currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Jobs, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteJob(global::SceneCRMData.Implementation.Job entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Jobs.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Play
    
        public void InsertPlay(global::SceneCRMData.Implementation.Play entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Plays.AddObject(entity);
            }
        }
    
        public void UpdatePlay(global::SceneCRMData.Implementation.Play currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Plays, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePlay(global::SceneCRMData.Implementation.Play entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Plays.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region PlayVolunteer
    
        public void InsertPlayVolunteer(global::SceneCRMData.Implementation.PlayVolunteer entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.PlayVolunteers.AddObject(entity);
            }
        }
    
        public void UpdatePlayVolunteer(global::SceneCRMData.Implementation.PlayVolunteer currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.PlayVolunteers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePlayVolunteer(global::SceneCRMData.Implementation.PlayVolunteer entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.PlayVolunteers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Production
    
        public void InsertProduction(global::SceneCRMData.Implementation.Production entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Productions.AddObject(entity);
            }
        }
    
        public void UpdateProduction(global::SceneCRMData.Implementation.Production currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Productions, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProduction(global::SceneCRMData.Implementation.Production entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Productions.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ProductionVolunteer
    
        public void InsertProductionVolunteer(global::SceneCRMData.Implementation.ProductionVolunteer entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ProductionVolunteers.AddObject(entity);
            }
        }
    
        public void UpdateProductionVolunteer(global::SceneCRMData.Implementation.ProductionVolunteer currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ProductionVolunteers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProductionVolunteer(global::SceneCRMData.Implementation.ProductionVolunteer entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ProductionVolunteers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region sysdiagram
    
        public void Insertsysdiagram(global::SceneCRMData.Implementation.sysdiagram entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.sysdiagrams.AddObject(entity);
            }
        }
    
        public void Updatesysdiagram(global::SceneCRMData.Implementation.sysdiagram currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.sysdiagrams, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletesysdiagram(global::SceneCRMData.Implementation.sysdiagram entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.sysdiagrams.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Term
    
        public void InsertTerm(global::SceneCRMData.Implementation.Term entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Terms.AddObject(entity);
            }
        }
    
        public void UpdateTerm(global::SceneCRMData.Implementation.Term currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Terms, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteTerm(global::SceneCRMData.Implementation.Term entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Terms.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Volunteer
    
        public void InsertVolunteer(global::SceneCRMData.Implementation.Volunteer entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Volunteers.AddObject(entity);
            }
        }
    
        public void UpdateVolunteer(global::SceneCRMData.Implementation.Volunteer currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Volunteers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteVolunteer(global::SceneCRMData.Implementation.Volunteer entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Volunteers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region VolunteerCapability
    
        public void InsertVolunteerCapability(global::SceneCRMData.Implementation.VolunteerCapability entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.VolunteerCapabilities.AddObject(entity);
            }
        }
    
        public void UpdateVolunteerCapability(global::SceneCRMData.Implementation.VolunteerCapability currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.VolunteerCapabilities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteVolunteerCapability(global::SceneCRMData.Implementation.VolunteerCapability entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.VolunteerCapabilities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_Single(string frameworkOperators, global::System.Nullable<int> ChildId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Child>("Children_Single", frameworkOperators, ChildId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ChildId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Child>("Children_SingleOrDefault", frameworkOperators, ChildId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Child>("Children_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_Single(string frameworkOperators, global::System.Nullable<int> CourseId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Course>("Courses_Single", frameworkOperators, CourseId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> CourseId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Course>("Courses_SingleOrDefault", frameworkOperators, CourseId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Course>("Courses_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_Single(string frameworkOperators, global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseAttendance>("CourseAttendances_Single", frameworkOperators, ChildId, CourseId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseAttendance>("CourseAttendances_SingleOrDefault", frameworkOperators, ChildId, CourseId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseAttendance>("CourseAttendances_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_Single(string frameworkOperators, string CourseTypeCode)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseType>("CourseTypes_Single", frameworkOperators, CourseTypeCode);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_SingleOrDefault(string frameworkOperators, string CourseTypeCode)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseType>("CourseTypes_SingleOrDefault", frameworkOperators, CourseTypeCode);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseType>("CourseTypes_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_Single(string frameworkOperators, global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseVolunteer>("CourseVolunteers_Single", frameworkOperators, CourseId, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseVolunteer>("CourseVolunteers_SingleOrDefault", frameworkOperators, CourseId, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CourseVolunteer>("CourseVolunteers_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_Single(string frameworkOperators, global::System.Nullable<int> CrbCheckId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CrbCheck>("CrbChecks_Single", frameworkOperators, CrbCheckId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> CrbCheckId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CrbCheck>("CrbChecks_SingleOrDefault", frameworkOperators, CrbCheckId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.CrbCheck>("CrbChecks_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_Single(string frameworkOperators, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Job>("Jobs_Single", frameworkOperators, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Job>("Jobs_SingleOrDefault", frameworkOperators, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Job>("Jobs_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_Single(string frameworkOperators, global::System.Nullable<int> PlayId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Play>("Plays_Single", frameworkOperators, PlayId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> PlayId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Play>("Plays_SingleOrDefault", frameworkOperators, PlayId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Play>("Plays_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_Single(string frameworkOperators, global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.PlayVolunteer>("PlayVolunteers_Single", frameworkOperators, PlayId, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.PlayVolunteer>("PlayVolunteers_SingleOrDefault", frameworkOperators, PlayId, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.PlayVolunteer>("PlayVolunteers_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_Single(string frameworkOperators, global::System.Nullable<int> ProductionId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Production>("Productions_Single", frameworkOperators, ProductionId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ProductionId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Production>("Productions_SingleOrDefault", frameworkOperators, ProductionId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Production>("Productions_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_Single(string frameworkOperators, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("ProductionVolunteers_Single", frameworkOperators, VolunteerId, JobId, ProductionId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("ProductionVolunteers_SingleOrDefault", frameworkOperators, VolunteerId, JobId, ProductionId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("ProductionVolunteers_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_Single(string frameworkOperators, global::System.Nullable<int> diagram_id)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.sysdiagram>("sysdiagrams_Single", frameworkOperators, diagram_id);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> diagram_id)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.sysdiagram>("sysdiagrams_SingleOrDefault", frameworkOperators, diagram_id);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.sysdiagram>("sysdiagrams_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_Single(string frameworkOperators, global::System.Nullable<int> TermId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Term>("Terms_Single", frameworkOperators, TermId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> TermId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Term>("Terms_SingleOrDefault", frameworkOperators, TermId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Term>("Terms_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_Single(string frameworkOperators, global::System.Nullable<int> VolunteerId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Volunteer>("Volunteers_Single", frameworkOperators, VolunteerId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> VolunteerId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Volunteer>("Volunteers_SingleOrDefault", frameworkOperators, VolunteerId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.Volunteer>("Volunteers_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_Single(string frameworkOperators, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.VolunteerCapability>("VolunteerCapabilities_Single", frameworkOperators, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.VolunteerCapability>("VolunteerCapabilities_SingleOrDefault", frameworkOperators, VolunteerId, JobId);
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_All(string frameworkOperators)
        {
            return this.GetQuery<global::SceneCRMData.Implementation.VolunteerCapability>("VolunteerCapabilities_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().SceneCRMData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class SceneCRMDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::SceneCRMData.Implementation.SceneCRMDataObjectContext>
    {
        public SceneCRMDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_Single(global::System.Nullable<int> ChildId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Child>("Children_All"),
                (c) => (ChildId.HasValue && (c.ChildId == ChildId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_SingleOrDefault(global::System.Nullable<int> ChildId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Child>("Children_All"),
                (c) => (ChildId.HasValue && (c.ChildId == ChildId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> Children_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Child> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Child>("[Children]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_Single(global::System.Nullable<int> CourseId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Course>("Courses_All"),
                (c) => (CourseId.HasValue && (c.CourseId == CourseId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_SingleOrDefault(global::System.Nullable<int> CourseId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Course>("Courses_All"),
                (c) => (CourseId.HasValue && (c.CourseId == CourseId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> Courses_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Course> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Course>("[Courses]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_Single(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseAttendance>("CourseAttendances_All"),
                (c) => ((CourseId.HasValue && (c.CourseId == CourseId)) && (ChildId.HasValue && (c.ChildId == ChildId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_SingleOrDefault(global::System.Nullable<int> ChildId, global::System.Nullable<int> CourseId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseAttendance>("CourseAttendances_All"),
                (c) => ((CourseId.HasValue && (c.CourseId == CourseId)) && (ChildId.HasValue && (c.ChildId == ChildId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> CourseAttendances_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseAttendance> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.CourseAttendance>("[CourseAttendances]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_Single(string CourseTypeCode)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseType>("CourseTypes_All"),
                (c) => (c.CourseTypeCode.CompareTo(CourseTypeCode) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_SingleOrDefault(string CourseTypeCode)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseType>("CourseTypes_All"),
                (c) => (c.CourseTypeCode.CompareTo(CourseTypeCode) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> CourseTypes_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseType> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.CourseType>("[CourseTypes]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_Single(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseVolunteer>("CourseVolunteers_All"),
                (c) => (((JobId.HasValue && (c.JobId == JobId)) && (VolunteerId.HasValue && (c.VolunteerId == VolunteerId))) && (CourseId.HasValue && (c.CourseId == CourseId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_SingleOrDefault(global::System.Nullable<int> CourseId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CourseVolunteer>("CourseVolunteers_All"),
                (c) => (((JobId.HasValue && (c.JobId == JobId)) && (VolunteerId.HasValue && (c.VolunteerId == VolunteerId))) && (CourseId.HasValue && (c.CourseId == CourseId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> CourseVolunteers_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CourseVolunteer> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.CourseVolunteer>("[CourseVolunteers]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_Single(global::System.Nullable<int> CrbCheckId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CrbCheck>("CrbChecks_All"),
                (c) => (CrbCheckId.HasValue && (c.CrbCheckId == CrbCheckId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_SingleOrDefault(global::System.Nullable<int> CrbCheckId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.CrbCheck>("CrbChecks_All"),
                (c) => (CrbCheckId.HasValue && (c.CrbCheckId == CrbCheckId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> CrbChecks_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.CrbCheck> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.CrbCheck>("[CrbChecks]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_Single(global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Job>("Jobs_All"),
                (j) => (JobId.HasValue && (j.JobId == JobId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_SingleOrDefault(global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Job>("Jobs_All"),
                (j) => (JobId.HasValue && (j.JobId == JobId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> Jobs_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Job> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Job>("[Jobs]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_Single(global::System.Nullable<int> PlayId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Play>("Plays_All"),
                (p) => (PlayId.HasValue && (p.PlayId == PlayId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_SingleOrDefault(global::System.Nullable<int> PlayId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Play>("Plays_All"),
                (p) => (PlayId.HasValue && (p.PlayId == PlayId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> Plays_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Play> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Play>("[Plays]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_Single(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.PlayVolunteer>("PlayVolunteers_All"),
                (p) => (((JobId.HasValue && (p.JobId == JobId)) && (VolunteerId.HasValue && (p.VolunteerId == VolunteerId))) && (PlayId.HasValue && (p.PlayId == PlayId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_SingleOrDefault(global::System.Nullable<int> PlayId, global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.PlayVolunteer>("PlayVolunteers_All"),
                (p) => (((JobId.HasValue && (p.JobId == JobId)) && (VolunteerId.HasValue && (p.VolunteerId == VolunteerId))) && (PlayId.HasValue && (p.PlayId == PlayId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> PlayVolunteers_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.PlayVolunteer> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.PlayVolunteer>("[PlayVolunteers]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_Single(global::System.Nullable<int> ProductionId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Production>("Productions_All"),
                (p) => (ProductionId.HasValue && (p.ProductionId == ProductionId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_SingleOrDefault(global::System.Nullable<int> ProductionId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Production>("Productions_All"),
                (p) => (ProductionId.HasValue && (p.ProductionId == ProductionId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> Productions_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Production> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Production>("[Productions]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_Single(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("ProductionVolunteers_All"),
                (p) => (((ProductionId.HasValue && (p.ProductionId == ProductionId)) && (JobId.HasValue && (p.JobId == JobId))) && (VolunteerId.HasValue && (p.VolunteerId == VolunteerId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_SingleOrDefault(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId, global::System.Nullable<int> ProductionId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("ProductionVolunteers_All"),
                (p) => (((ProductionId.HasValue && (p.ProductionId == ProductionId)) && (JobId.HasValue && (p.JobId == JobId))) && (VolunteerId.HasValue && (p.VolunteerId == VolunteerId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> ProductionVolunteers_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.ProductionVolunteer> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.ProductionVolunteer>("[ProductionVolunteers]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_Single(global::System.Nullable<int> diagram_id)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.sysdiagram>("sysdiagrams_All"),
                (s) => (diagram_id.HasValue && (s.diagram_id == diagram_id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_SingleOrDefault(global::System.Nullable<int> diagram_id)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.sysdiagram>("sysdiagrams_All"),
                (s) => (diagram_id.HasValue && (s.diagram_id == diagram_id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> sysdiagrams_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.sysdiagram> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.sysdiagram>("[sysdiagrams]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_Single(global::System.Nullable<int> TermId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Term>("Terms_All"),
                (t) => (TermId.HasValue && (t.TermId == TermId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_SingleOrDefault(global::System.Nullable<int> TermId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Term>("Terms_All"),
                (t) => (TermId.HasValue && (t.TermId == TermId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> Terms_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Term> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Term>("[Terms]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_Single(global::System.Nullable<int> VolunteerId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Volunteer>("Volunteers_All"),
                (v) => (VolunteerId.HasValue && (v.VolunteerId == VolunteerId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_SingleOrDefault(global::System.Nullable<int> VolunteerId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.Volunteer>("Volunteers_All"),
                (v) => (VolunteerId.HasValue && (v.VolunteerId == VolunteerId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> Volunteers_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.Volunteer> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.Volunteer>("[Volunteers]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_Single(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.VolunteerCapability>("VolunteerCapabilities_All"),
                (v) => ((JobId.HasValue && (v.JobId == JobId)) && (VolunteerId.HasValue && (v.VolunteerId == VolunteerId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_SingleOrDefault(global::System.Nullable<int> VolunteerId, global::System.Nullable<int> JobId)
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::SceneCRMData.Implementation.VolunteerCapability>("VolunteerCapabilities_All"),
                (v) => ((JobId.HasValue && (v.JobId == JobId)) && (VolunteerId.HasValue && (v.VolunteerId == VolunteerId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> VolunteerCapabilities_All()
        {
            global::System.Linq.IQueryable<global::SceneCRMData.Implementation.VolunteerCapability> query;
            query = base.CreateQuery<global::SceneCRMData.Implementation.VolunteerCapability>("[VolunteerCapabilities]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::SceneCRMData.Implementation.Child))
            {
                return new global::SceneCRMData.Implementation.Child();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Course))
            {
                return new global::SceneCRMData.Implementation.Course();
            }
            if (type == typeof(global::SceneCRMData.Implementation.CourseAttendance))
            {
                return new global::SceneCRMData.Implementation.CourseAttendance();
            }
            if (type == typeof(global::SceneCRMData.Implementation.CourseType))
            {
                return new global::SceneCRMData.Implementation.CourseType();
            }
            if (type == typeof(global::SceneCRMData.Implementation.CourseVolunteer))
            {
                return new global::SceneCRMData.Implementation.CourseVolunteer();
            }
            if (type == typeof(global::SceneCRMData.Implementation.CrbCheck))
            {
                return new global::SceneCRMData.Implementation.CrbCheck();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Job))
            {
                return new global::SceneCRMData.Implementation.Job();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Play))
            {
                return new global::SceneCRMData.Implementation.Play();
            }
            if (type == typeof(global::SceneCRMData.Implementation.PlayVolunteer))
            {
                return new global::SceneCRMData.Implementation.PlayVolunteer();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Production))
            {
                return new global::SceneCRMData.Implementation.Production();
            }
            if (type == typeof(global::SceneCRMData.Implementation.ProductionVolunteer))
            {
                return new global::SceneCRMData.Implementation.ProductionVolunteer();
            }
            if (type == typeof(global::SceneCRMData.Implementation.sysdiagram))
            {
                return new global::SceneCRMData.Implementation.sysdiagram();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Term))
            {
                return new global::SceneCRMData.Implementation.Term();
            }
            if (type == typeof(global::SceneCRMData.Implementation.Volunteer))
            {
                return new global::SceneCRMData.Implementation.Volunteer();
            }
            if (type == typeof(global::SceneCRMData.Implementation.VolunteerCapability))
            {
                return new global::SceneCRMData.Implementation.VolunteerCapability();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::SceneCRMData.Implementation.SceneCRMDataObjectContext CreateObjectContext()
        {
            return new global::SceneCRMData.Implementation.SceneCRMDataObjectContext(base.GetEntityConnectionString(
                "SceneCRMData", 
                "res://*/SceneCRMData.csdl|res://*/SceneCRMData.ssdl|res://*/SceneCRMData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Child))
            {
                return new global::SceneCRMData.Implementation.Child();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Course))
            {
                return new global::SceneCRMData.Implementation.Course();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CourseAttendance))
            {
                return new global::SceneCRMData.Implementation.CourseAttendance();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CourseType))
            {
                return new global::SceneCRMData.Implementation.CourseType();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CourseVolunteer))
            {
                return new global::SceneCRMData.Implementation.CourseVolunteer();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CrbCheck))
            {
                return new global::SceneCRMData.Implementation.CrbCheck();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Job))
            {
                return new global::SceneCRMData.Implementation.Job();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Play))
            {
                return new global::SceneCRMData.Implementation.Play();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.PlayVolunteer))
            {
                return new global::SceneCRMData.Implementation.PlayVolunteer();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Production))
            {
                return new global::SceneCRMData.Implementation.Production();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ProductionVolunteer))
            {
                return new global::SceneCRMData.Implementation.ProductionVolunteer();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.sysdiagram))
            {
                return new global::SceneCRMData.Implementation.sysdiagram();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Term))
            {
                return new global::SceneCRMData.Implementation.Term();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Volunteer))
            {
                return new global::SceneCRMData.Implementation.Volunteer();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.VolunteerCapability))
            {
                return new global::SceneCRMData.Implementation.VolunteerCapability();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.SceneCRMData))
            {
                return new global::LightSwitchApplication.SceneCRMDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.SceneCRMData))
            {
                return new global::LightSwitchApplication.Implementation.SceneCRMDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Child) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Child);
            }
            if (typeof(global::LightSwitchApplication.Course) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Course);
            }
            if (typeof(global::LightSwitchApplication.CourseAttendance) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.CourseAttendance);
            }
            if (typeof(global::LightSwitchApplication.CourseType) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.CourseType);
            }
            if (typeof(global::LightSwitchApplication.CourseVolunteer) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.CourseVolunteer);
            }
            if (typeof(global::LightSwitchApplication.CrbCheck) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.CrbCheck);
            }
            if (typeof(global::LightSwitchApplication.Job) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Job);
            }
            if (typeof(global::LightSwitchApplication.Play) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Play);
            }
            if (typeof(global::LightSwitchApplication.PlayVolunteer) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.PlayVolunteer);
            }
            if (typeof(global::LightSwitchApplication.Production) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Production);
            }
            if (typeof(global::LightSwitchApplication.ProductionVolunteer) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.ProductionVolunteer);
            }
            if (typeof(global::LightSwitchApplication.sysdiagram) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.sysdiagram);
            }
            if (typeof(global::LightSwitchApplication.Term) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Term);
            }
            if (typeof(global::LightSwitchApplication.Volunteer) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.Volunteer);
            }
            if (typeof(global::LightSwitchApplication.VolunteerCapability) == definitionType)
            {
                return typeof(global::SceneCRMData.Implementation.VolunteerCapability);
            }
            return null;
        }
    }
}

namespace SceneCRMData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Child :
        global::LightSwitchApplication.Child.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Child.DetailsClass.IImplementation.CourseAttendances
        {
            get
            {
                return this.CourseAttendances;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.Course.Metadata))]
    public partial class Course :
        global::LightSwitchApplication.Course.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Course.DetailsClass.IImplementation.CourseType
        {
            get
            {
                return this.CourseType;
            }
            set
            {
                this.CourseType = (global::SceneCRMData.Implementation.CourseType)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("CourseType");
                }
            }
        }
        
        partial void OnCourseTypeCodeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("CourseType");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Course.DetailsClass.IImplementation.Term
        {
            get
            {
                return this.Term;
            }
            set
            {
                this.Term = (global::SceneCRMData.Implementation.Term)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Term");
                }
            }
        }
        
        partial void OnTermIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Term");
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Course.DetailsClass.IImplementation.CourseAttendances
        {
            get
            {
                return this.CourseAttendances;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Course.DetailsClass.IImplementation.CourseVolunteers
        {
            get
            {
                return this.CourseVolunteers;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.CourseType CourseType { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Term Term { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.CourseAttendance.Metadata))]
    public partial class CourseAttendance :
        global::LightSwitchApplication.CourseAttendance.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CourseAttendance.DetailsClass.IImplementation.Child
        {
            get
            {
                return this.Child;
            }
            set
            {
                this.Child = (global::SceneCRMData.Implementation.Child)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Child");
                }
            }
        }
        
        partial void OnChildIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Child");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CourseAttendance.DetailsClass.IImplementation.Course
        {
            get
            {
                return this.Course;
            }
            set
            {
                this.Course = (global::SceneCRMData.Implementation.Course)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Course");
                }
            }
        }
        
        partial void OnCourseIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Course");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Child Child { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Course Course { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class CourseType :
        global::LightSwitchApplication.CourseType.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.CourseType.DetailsClass.IImplementation.Courses
        {
            get
            {
                return this.Courses;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.CourseVolunteer.Metadata))]
    public partial class CourseVolunteer :
        global::LightSwitchApplication.CourseVolunteer.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CourseVolunteer.DetailsClass.IImplementation.Course
        {
            get
            {
                return this.Course;
            }
            set
            {
                this.Course = (global::SceneCRMData.Implementation.Course)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Course");
                }
            }
        }
        
        partial void OnCourseIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Course");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CourseVolunteer.DetailsClass.IImplementation.Job
        {
            get
            {
                return this.Job;
            }
            set
            {
                this.Job = (global::SceneCRMData.Implementation.Job)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Job");
                }
            }
        }
        
        partial void OnJobIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Job");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CourseVolunteer.DetailsClass.IImplementation.Volunteer
        {
            get
            {
                return this.Volunteer;
            }
            set
            {
                this.Volunteer = (global::SceneCRMData.Implementation.Volunteer)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Volunteer");
                }
            }
        }
        
        partial void OnVolunteerIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Volunteer");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Course Course { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Job Job { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Volunteer Volunteer { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.CrbCheck.Metadata))]
    public partial class CrbCheck :
        global::LightSwitchApplication.CrbCheck.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CrbCheck.DetailsClass.IImplementation.Volunteer
        {
            get
            {
                return this.Volunteer;
            }
            set
            {
                this.Volunteer = (global::SceneCRMData.Implementation.Volunteer)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Volunteer");
                }
            }
        }
        
        partial void OnVolunteerIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Volunteer");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Volunteer Volunteer { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Job :
        global::LightSwitchApplication.Job.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Job.DetailsClass.IImplementation.CourseVolunteers
        {
            get
            {
                return this.CourseVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Job.DetailsClass.IImplementation.PlayVolunteers
        {
            get
            {
                return this.PlayVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Job.DetailsClass.IImplementation.ProductionVolunteers
        {
            get
            {
                return this.ProductionVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Job.DetailsClass.IImplementation.VolunteerCapabilities
        {
            get
            {
                return this.VolunteerCapabilities;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Play :
        global::LightSwitchApplication.Play.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Play.DetailsClass.IImplementation.PlayVolunteers
        {
            get
            {
                return this.PlayVolunteers;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.PlayVolunteer.Metadata))]
    public partial class PlayVolunteer :
        global::LightSwitchApplication.PlayVolunteer.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.PlayVolunteer.DetailsClass.IImplementation.Job
        {
            get
            {
                return this.Job;
            }
            set
            {
                this.Job = (global::SceneCRMData.Implementation.Job)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Job");
                }
            }
        }
        
        partial void OnJobIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Job");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.PlayVolunteer.DetailsClass.IImplementation.Play
        {
            get
            {
                return this.Play;
            }
            set
            {
                this.Play = (global::SceneCRMData.Implementation.Play)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Play");
                }
            }
        }
        
        partial void OnPlayIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Play");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.PlayVolunteer.DetailsClass.IImplementation.Volunteer
        {
            get
            {
                return this.Volunteer;
            }
            set
            {
                this.Volunteer = (global::SceneCRMData.Implementation.Volunteer)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Volunteer");
                }
            }
        }
        
        partial void OnVolunteerIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Volunteer");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Job Job { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Play Play { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Volunteer Volunteer { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Production :
        global::LightSwitchApplication.Production.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Production.DetailsClass.IImplementation.ProductionVolunteers
        {
            get
            {
                return this.ProductionVolunteers;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.ProductionVolunteer.Metadata))]
    public partial class ProductionVolunteer :
        global::LightSwitchApplication.ProductionVolunteer.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ProductionVolunteer.DetailsClass.IImplementation.Job
        {
            get
            {
                return this.Job;
            }
            set
            {
                this.Job = (global::SceneCRMData.Implementation.Job)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Job");
                }
            }
        }
        
        partial void OnJobIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Job");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ProductionVolunteer.DetailsClass.IImplementation.Production
        {
            get
            {
                return this.Production;
            }
            set
            {
                this.Production = (global::SceneCRMData.Implementation.Production)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Production");
                }
            }
        }
        
        partial void OnProductionIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Production");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.ProductionVolunteer.DetailsClass.IImplementation.Volunteer
        {
            get
            {
                return this.Volunteer;
            }
            set
            {
                this.Volunteer = (global::SceneCRMData.Implementation.Volunteer)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Volunteer");
                }
            }
        }
        
        partial void OnVolunteerIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Volunteer");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Job Job { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Production Production { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Volunteer Volunteer { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class sysdiagram :
        global::LightSwitchApplication.sysdiagram.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Term :
        global::LightSwitchApplication.Term.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Term.DetailsClass.IImplementation.Courses
        {
            get
            {
                return this.Courses;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Volunteer :
        global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation.CourseVolunteers
        {
            get
            {
                return this.CourseVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation.CrbChecks
        {
            get
            {
                return this.CrbChecks;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation.PlayVolunteers
        {
            get
            {
                return this.PlayVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation.ProductionVolunteers
        {
            get
            {
                return this.ProductionVolunteers;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Volunteer.DetailsClass.IImplementation.VolunteerCapabilities
        {
            get
            {
                return this.VolunteerCapabilities;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::SceneCRMData.Implementation.VolunteerCapability.Metadata))]
    public partial class VolunteerCapability :
        global::LightSwitchApplication.VolunteerCapability.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.VolunteerCapability.DetailsClass.IImplementation.Job
        {
            get
            {
                return this.Job;
            }
            set
            {
                this.Job = (global::SceneCRMData.Implementation.Job)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Job");
                }
            }
        }
        
        partial void OnJobIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Job");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.VolunteerCapability.DetailsClass.IImplementation.Volunteer
        {
            get
            {
                return this.Volunteer;
            }
            set
            {
                this.Volunteer = (global::SceneCRMData.Implementation.Volunteer)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Volunteer");
                }
            }
        }
        
        partial void OnVolunteerIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Volunteer");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Job Job { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::SceneCRMData.Implementation.Volunteer Volunteer { get; set; }
        
        }
    }
    
}

